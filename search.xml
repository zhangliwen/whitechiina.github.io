<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue1 - 副本</title>
      <link href="/2019/11/15/Vue1%20-%20%E5%89%AF%E6%9C%AC/"/>
      <url>/2019/11/15/Vue1%20-%20%E5%89%AF%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h4 id="阶段要学习的内容"><a href="#阶段要学习的内容" class="headerlink" title="阶段要学习的内容"></a>阶段要学习的内容</h4><ol><li>Vuejs 基础语法</li><li>Vue-router (前端路由组件)</li><li>Vuex (全局状态管理器)</li><li>axios (可用在前端/Node的请求模块)</li><li>Vue-cli2 (vue2.x) 脚手架模板</li><li>组件库的学习</li></ol><h4 id="简介-What"><a href="#简介-What" class="headerlink" title="简介(What)"></a>简介(What)</h4><p>​    它是一个渐进式的前端框架, 底层还是封装的原生JS </p><p>​    渐进式: 由底向上逐级开发组件, 增量开发, 构成我们的应用</p><p><img src="D:%5Czg%E6%96%87%E6%A1%A3%5C%E7%AC%AC%E5%9B%9B%E9%98%B6%E6%AE%B5_%E5%A4%87%E8%AF%BE_%E6%9D%8E%E4%B8%9C%E6%97%AD%5Cday03_vue01%5C%E7%A4%BA%E4%BE%8B%5C%E6%B8%90%E8%BF%9B%E5%BC%8F%E8%AE%B2%E8%A7%A3.png" alt="渐进式讲解"></p><h4 id="为什么学-Why"><a href="#为什么学-Why" class="headerlink" title="为什么学?(Why)"></a>为什么学?(Why)</h4><p>​    Vuejs的速度一目了然, 容错性很高. 成吨的提高你的开发效率, 极大减少了你操作DOM的动作, 只需要关系数据和视图即可</p><p>​    原生Javascript:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul id=<span class="string">"myUl"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">let</span> arr = [<span class="string">"春天"</span>, <span class="string">"夏天"</span>, <span class="string">"秋天"</span>, <span class="string">"冬天"</span>];</span><br><span class="line">        <span class="keyword">let</span> myUl = <span class="built_in">document</span>.getElementById(<span class="string">"myUl"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> theLi = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">            theLi.innerHTML = arr[i];</span><br><span class="line">            myUl.appendChild(theLi);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p>​    Vue实现同样效果:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;ul&gt;<span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in arr"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el: "#app",</span></span><br><span class="line"><span class="regexp">        data: &#123;arr: ["春天", "夏天", "秋天", "冬天"]&#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>​    原生js好比锯条, jq好比是带把手的锯条, vuejs电锯</p><h4 id="怎么学-How"><a href="#怎么学-How" class="headerlink" title="怎么学?(How)"></a>怎么学?(How)</h4><ol><li><p>要有html+css+javascript的基础</p><ol start="2"><li>以及Vuejs的基础语法 (不建议上来就用VueCli脚手架)</li><li>NodeJS+Webpack的基础</li><li>VueJS路由学习</li><li>VueCli脚手架的学习和使用 (熟悉VueCli里的各项配置)</li><li>Vuex+脚手架里使用路由+网络请求库+组件库的学习</li></ol></li></ol><h4 id="VueJS注意事项"><a href="#VueJS注意事项" class="headerlink" title="VueJS注意事项"></a>VueJS注意事项</h4><ol><li>不兼容IE8及以下IE浏览器</li><li>建议安装vue的devtool工具, 帮助你进行调试代码</li><li>必须是vuejs编写的代码, 才可以在控制台使用vue调试工具</li></ol><h4 id="安装devTool工具"><a href="#安装devTool工具" class="headerlink" title="安装devTool工具"></a>安装devTool工具</h4><ol><li>下载: 官网(<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a>) -&gt; 生态系统 -&gt; devTool工具</li><li>我们下载的是Google Chrome浏览器的插件 -&gt; 打开谷歌浏览器 -&gt; 更多工具 -&gt; 扩展程序</li><li>打开开发者模式, 把下载好的插件文件夹 -&gt; 拖拽扔进去即可完成安装</li><li>注意: 插件的文件夹不要删除/也不要随意挪动</li></ol><h3 id="使用VueJS"><a href="#使用VueJS" class="headerlink" title="使用VueJS"></a>使用VueJS</h3><ol><li><p>引入vuejs的js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/vue/2.6.6/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>声明根节点标签, 包裹着的都是Vuejs代码, 注意不能以html/body为根标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>实例化Vue对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">"#app"</span>, <span class="comment">// 告诉vue实例, 从id叫app的标签开始, 内部都是你vue的代码</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h4><p>​    它就是vuejs里最独特的使用方式, 可以在html中直接书写JS的变量/表达式</p><p>​    js表达式: 由变量/常量+运算符 组成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123;表达式&#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">"#app"</span>,</span><br><span class="line">data : &#123; <span class="comment">// data里都是声明的变量</span></span><br><span class="line">    message: <span class="string">"欢迎来到vuejs的世界"</span> <span class="comment">//无需var/let, 直接书写即可!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​    注意, 声明式渲染中, 可以写入表达式代码(包括判断/运算/条件运算符)等</p><p>​    例如:</p><pre><code>&lt;p&gt;{{ message }}&lt;/p&gt;&lt;p&gt;{{ 10 + 5 }}&lt;/p&gt;&lt;p&gt;{{ grade === 10 ? '等于' : '不等于' }}&lt;/p&gt;&lt;p&gt;{{ grade > 9 }}&lt;/p&gt;</code></pre><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><p>​    v- 开头的, 叫做 指令, 作用: 给标签扩展更多的功能, 因为你的属性被vue的指令修饰了, 说明现在你用的是vue的东西, 所以可以直接使用, 无需再加双大括号修饰</p><h5 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h5><p>​        给标签自带的属性, 设置一个变量的值, </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-bind:title=<span class="string">"pTitle"</span>&gt;我是个可怜, 无助, 能吃的p标签&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;img :src="imgSrc" alt="" /</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h5><p>​        给标签绑定事件, 注意后面的地方直接跟方法名, 如果没有参数, 则无需写小括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v-on:click=<span class="string">"btn"</span></span><br><span class="line">@click=<span class="string">"btn2"</span> <span class="comment">// 事件简化写法用@</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法要写在new Vue() 的methods:中</span></span><br></pre></td></tr></table></figure><h5 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h5><p>​        控制标签的出现和隐藏, 用于控制标签的 出现/隐藏 如果传true则当前标签+所有子标签都出现</p><p>​        如果传false, 则都不会出现, 但是如果有对应的v-else会显示v-else的标签</p><h5 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h5><p>​        v-else不能单独出现, 必须配合对应的v-if使用</p><h5 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h5><p>​        跟v-if的效果一样, 唯一的区别是:</p><p>​        v-if 传false 时, 不会在DOM上加载这个标签</p><p>​        v-show 传false 时, 会在DOM上加载这个标签(利用display:none;的方式隐藏</p><blockquote><p>所以用v-if和v-show取决于标签是否要频繁的切换, 如果需要则使用v-show, 效率高, 特别是包含子标签特别多的时候</p></blockquote><h5 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h5><p>​        用于根据数据, 循环生成标签, 在指令里用的是最多的</p><p>​        item: 临时变量, 每次循环, 获取的是数组里每一项的值</p><p>​        in关键字(必须)</p><p>​        arr 代表的vue里声明的变量(数组)</p><p>​        index: 临时变量, 代表下角标的使用</p><p>​        注意1: 每个循环的标签, 需要给一个独立(不重复的)key属性的值, 用来标识唯一性, 用于部分刷新和重载数据</p><p>​        注意2: v-for使用位置: 确定让哪个标签循环铺设, 就在哪个标签身上写v-for</p><p>​        注意3: v-for里的临时变量, 只能在当前标签/子标签内使用, 不能在兄弟标签上使用</p><h5 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h5><p>​        v-model主要应用于表单标签上, value属性的绑定, 实现页面标签的value值和Vuejs变量的双向绑定 (推荐使用v-model), 页面改变表单的值, 会同步给vuejs里的变量</p><blockquote><p>注意: 只有input和textarea以及select 等表单, 有v-model, 用v-model来给表单绑定值</p></blockquote><p>​        例如: 输入框/密码框/多选/下拉/单选/textarea</p><p>​        注意: 多选框的v-model必须是一个数组类型</p><blockquote><p> v-model, 实际上绑定的就是value属性</p></blockquote><h5 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h5><p>​        v-once修饰的标签, 只有在网页打开的第一次加载完, 以后就不会在受变量变化而影响</p><h4 id="事件详解"><a href="#事件详解" class="headerlink" title="事件详解"></a>事件详解</h4><p>​    在事件/属性后面.xxx 叫做修饰符, 修饰符一般都有额外的功能</p><ol><li><p>@click.stop 阻止事件冒泡</p><ol start="2"><li>@click.prevent 阻止默认事件</li><li>@click.self 只能由标签自身触发</li><li>@click.once 程序运行期间只能执行一次</li><li>@click=”btn6(myArg)” 事件传参, 如果是字符串, 请用单引号</li></ol></li></ol><blockquote><p>注意: 如果传参, 再使用(), 如果不传, 可以省略()不写, 如果传实践对象, 要使用$event</p></blockquote><h3 id="双向数据绑定原理"><a href="#双向数据绑定原理" class="headerlink" title="双向数据绑定原理"></a>双向数据绑定原理</h3><ol><li><p>页面-&gt;数据, 借助 oninput事件</p><ol start="2"><li>数据-&gt;页面, 借助Object.defineProperty() 监听一个对象的属性值的变化</li></ol></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> temp = <span class="string">""</span>; <span class="comment">// 临时存储值</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">       data.message = ev.target.value; <span class="comment">// 获取输入框里最新的值</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">let</span> data = &#123; <span class="comment">// 准备类似data里的数据</span></span><br><span class="line">       message: <span class="string">""</span></span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 参数1: 监听的对象, 参数2: 监听对象里的属性名, 参数3: 固定写法</span></span><br><span class="line">   <span class="built_in">Object</span>.defineProperty(data, <span class="string">"message"</span>, &#123;</span><br><span class="line">       <span class="comment">// 当你获取data对象里的message属性值的时候, 触发get方法</span></span><br><span class="line">       <span class="comment">// 不要在get方法里直接提取data.message的值, 会造成递归调用卡死.</span></span><br><span class="line">      <span class="keyword">get</span> () &#123;</span><br><span class="line">          <span class="comment">// return到你 写data.message的地方</span></span><br><span class="line">          <span class="keyword">return</span> temp;</span><br><span class="line">      &#125;,</span><br><span class="line">       <span class="comment">// data.message =  xxx 赋值的时候, 才会触发</span></span><br><span class="line">       <span class="keyword">set</span> (val) &#123;</span><br><span class="line">           <span class="comment">// 更新页面(所有跟message变量相关的界面)</span></span><br><span class="line">           <span class="built_in">document</span>.getElementById(<span class="string">"myP"</span>).innerHTML = val;</span><br><span class="line">           <span class="built_in">document</span>.getElementById(<span class="string">"myInput"</span>).value = val;</span><br><span class="line">           <span class="comment">// 更新message的值</span></span><br><span class="line">           temp = val;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h3 id="其他资料"><a href="#其他资料" class="headerlink" title="其他资料"></a>其他资料</h3><p>​    Vuejs官网: <a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue1</title>
      <link href="/2019/11/15/Vue1/"/>
      <url>/2019/11/15/Vue1/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h4 id="阶段要学习的内容"><a href="#阶段要学习的内容" class="headerlink" title="阶段要学习的内容"></a>阶段要学习的内容</h4><ol><li>Vuejs 基础语法</li><li>Vue-router (前端路由组件)</li><li>Vuex (全局状态管理器)</li><li>axios (可用在前端/Node的请求模块)</li><li>Vue-cli2 (vue2.x) 脚手架模板</li><li>组件库的学习</li></ol><h4 id="简介-What"><a href="#简介-What" class="headerlink" title="简介(What)"></a>简介(What)</h4><p>​    它是一个渐进式的前端框架, 底层还是封装的原生JS </p><p>​    渐进式: 由底向上逐级开发组件, 增量开发, 构成我们的应用</p><p><img src="D:%5Czg%E6%96%87%E6%A1%A3%5C%E7%AC%AC%E5%9B%9B%E9%98%B6%E6%AE%B5_%E5%A4%87%E8%AF%BE_%E6%9D%8E%E4%B8%9C%E6%97%AD%5Cday03_vue01%5C%E7%A4%BA%E4%BE%8B%5C%E6%B8%90%E8%BF%9B%E5%BC%8F%E8%AE%B2%E8%A7%A3.png" alt="渐进式讲解"></p><h4 id="为什么学-Why"><a href="#为什么学-Why" class="headerlink" title="为什么学?(Why)"></a>为什么学?(Why)</h4><p>​    Vuejs的速度一目了然, 容错性很高. 成吨的提高你的开发效率, 极大减少了你操作DOM的动作, 只需要关系数据和视图即可</p><p>​    原生Javascript:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul id=<span class="string">"myUl"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">let</span> arr = [<span class="string">"春天"</span>, <span class="string">"夏天"</span>, <span class="string">"秋天"</span>, <span class="string">"冬天"</span>];</span><br><span class="line">        <span class="keyword">let</span> myUl = <span class="built_in">document</span>.getElementById(<span class="string">"myUl"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> theLi = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">            theLi.innerHTML = arr[i];</span><br><span class="line">            myUl.appendChild(theLi);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p>​    Vue实现同样效果:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;ul&gt;<span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in arr"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el: "#app",</span></span><br><span class="line"><span class="regexp">        data: &#123;arr: ["春天", "夏天", "秋天", "冬天"]&#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>​    原生js好比锯条, jq好比是带把手的锯条, vuejs电锯</p><h4 id="怎么学-How"><a href="#怎么学-How" class="headerlink" title="怎么学?(How)"></a>怎么学?(How)</h4><ol><li><p>要有html+css+javascript的基础</p><ol start="2"><li>以及Vuejs的基础语法 (不建议上来就用VueCli脚手架)</li><li>NodeJS+Webpack的基础</li><li>VueJS路由学习</li><li>VueCli脚手架的学习和使用 (熟悉VueCli里的各项配置)</li><li>Vuex+脚手架里使用路由+网络请求库+组件库的学习</li></ol></li></ol><h4 id="VueJS注意事项"><a href="#VueJS注意事项" class="headerlink" title="VueJS注意事项"></a>VueJS注意事项</h4><ol><li>不兼容IE8及以下IE浏览器</li><li>建议安装vue的devtool工具, 帮助你进行调试代码</li><li>必须是vuejs编写的代码, 才可以在控制台使用vue调试工具</li></ol><h4 id="安装devTool工具"><a href="#安装devTool工具" class="headerlink" title="安装devTool工具"></a>安装devTool工具</h4><ol><li>下载: 官网(<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a>) -&gt; 生态系统 -&gt; devTool工具</li><li>我们下载的是Google Chrome浏览器的插件 -&gt; 打开谷歌浏览器 -&gt; 更多工具 -&gt; 扩展程序</li><li>打开开发者模式, 把下载好的插件文件夹 -&gt; 拖拽扔进去即可完成安装</li><li>注意: 插件的文件夹不要删除/也不要随意挪动</li></ol><h3 id="使用VueJS"><a href="#使用VueJS" class="headerlink" title="使用VueJS"></a>使用VueJS</h3><ol><li><p>引入vuejs的js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/vue/2.6.6/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>声明根节点标签, 包裹着的都是Vuejs代码, 注意不能以html/body为根标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>实例化Vue对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">"#app"</span>, <span class="comment">// 告诉vue实例, 从id叫app的标签开始, 内部都是你vue的代码</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h4><p>​    它就是vuejs里最独特的使用方式, 可以在html中直接书写JS的变量/表达式</p><p>​    js表达式: 由变量/常量+运算符 组成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123;表达式&#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">"#app"</span>,</span><br><span class="line">data : &#123; <span class="comment">// data里都是声明的变量</span></span><br><span class="line">    message: <span class="string">"欢迎来到vuejs的世界"</span> <span class="comment">//无需var/let, 直接书写即可!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​    注意, 声明式渲染中, 可以写入表达式代码(包括判断/运算/条件运算符)等</p><p>​    例如:</p><pre><code>&lt;p&gt;{{ message }}&lt;/p&gt;&lt;p&gt;{{ 10 + 5 }}&lt;/p&gt;&lt;p&gt;{{ grade === 10 ? '等于' : '不等于' }}&lt;/p&gt;&lt;p&gt;{{ grade > 9 }}&lt;/p&gt;</code></pre><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><p>​    v- 开头的, 叫做 指令, 作用: 给标签扩展更多的功能, 因为你的属性被vue的指令修饰了, 说明现在你用的是vue的东西, 所以可以直接使用, 无需再加双大括号修饰</p><h5 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h5><p>​        给标签自带的属性, 设置一个变量的值, </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-bind:title=<span class="string">"pTitle"</span>&gt;我是个可怜, 无助, 能吃的p标签&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;img :src="imgSrc" alt="" /</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h5><p>​        给标签绑定事件, 注意后面的地方直接跟方法名, 如果没有参数, 则无需写小括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v-on:click=<span class="string">"btn"</span></span><br><span class="line">@click=<span class="string">"btn2"</span> <span class="comment">// 事件简化写法用@</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法要写在new Vue() 的methods:中</span></span><br></pre></td></tr></table></figure><h5 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h5><p>​        控制标签的出现和隐藏, 用于控制标签的 出现/隐藏 如果传true则当前标签+所有子标签都出现</p><p>​        如果传false, 则都不会出现, 但是如果有对应的v-else会显示v-else的标签</p><h5 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h5><p>​        v-else不能单独出现, 必须配合对应的v-if使用</p><h5 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h5><p>​        跟v-if的效果一样, 唯一的区别是:</p><p>​        v-if 传false 时, 不会在DOM上加载这个标签</p><p>​        v-show 传false 时, 会在DOM上加载这个标签(利用display:none;的方式隐藏</p><blockquote><p>所以用v-if和v-show取决于标签是否要频繁的切换, 如果需要则使用v-show, 效率高, 特别是包含子标签特别多的时候</p></blockquote><h5 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h5><p>​        用于根据数据, 循环生成标签, 在指令里用的是最多的</p><p>​        item: 临时变量, 每次循环, 获取的是数组里每一项的值</p><p>​        in关键字(必须)</p><p>​        arr 代表的vue里声明的变量(数组)</p><p>​        index: 临时变量, 代表下角标的使用</p><p>​        注意1: 每个循环的标签, 需要给一个独立(不重复的)key属性的值, 用来标识唯一性, 用于部分刷新和重载数据</p><p>​        注意2: v-for使用位置: 确定让哪个标签循环铺设, 就在哪个标签身上写v-for</p><p>​        注意3: v-for里的临时变量, 只能在当前标签/子标签内使用, 不能在兄弟标签上使用</p><h5 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h5><p>​        v-model主要应用于表单标签上, value属性的绑定, 实现页面标签的value值和Vuejs变量的双向绑定 (推荐使用v-model), 页面改变表单的值, 会同步给vuejs里的变量</p><blockquote><p>注意: 只有input和textarea以及select 等表单, 有v-model, 用v-model来给表单绑定值</p></blockquote><p>​        例如: 输入框/密码框/多选/下拉/单选/textarea</p><p>​        注意: 多选框的v-model必须是一个数组类型</p><blockquote><p> v-model, 实际上绑定的就是value属性</p></blockquote><h5 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h5><p>​        v-once修饰的标签, 只有在网页打开的第一次加载完, 以后就不会在受变量变化而影响</p><h4 id="事件详解"><a href="#事件详解" class="headerlink" title="事件详解"></a>事件详解</h4><p>​    在事件/属性后面.xxx 叫做修饰符, 修饰符一般都有额外的功能</p><ol><li><p>@click.stop 阻止事件冒泡</p><ol start="2"><li>@click.prevent 阻止默认事件</li><li>@click.self 只能由标签自身触发</li><li>@click.once 程序运行期间只能执行一次</li><li>@click=”btn6(myArg)” 事件传参, 如果是字符串, 请用单引号</li></ol></li></ol><blockquote><p>注意: 如果传参, 再使用(), 如果不传, 可以省略()不写, 如果传实践对象, 要使用$event</p></blockquote><h3 id="双向数据绑定原理"><a href="#双向数据绑定原理" class="headerlink" title="双向数据绑定原理"></a>双向数据绑定原理</h3><ol><li><p>页面-&gt;数据, 借助 oninput事件</p><ol start="2"><li>数据-&gt;页面, 借助Object.defineProperty() 监听一个对象的属性值的变化</li></ol></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> temp = <span class="string">""</span>; <span class="comment">// 临时存储值</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">       data.message = ev.target.value; <span class="comment">// 获取输入框里最新的值</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">let</span> data = &#123; <span class="comment">// 准备类似data里的数据</span></span><br><span class="line">       message: <span class="string">""</span></span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 参数1: 监听的对象, 参数2: 监听对象里的属性名, 参数3: 固定写法</span></span><br><span class="line">   <span class="built_in">Object</span>.defineProperty(data, <span class="string">"message"</span>, &#123;</span><br><span class="line">       <span class="comment">// 当你获取data对象里的message属性值的时候, 触发get方法</span></span><br><span class="line">       <span class="comment">// 不要在get方法里直接提取data.message的值, 会造成递归调用卡死.</span></span><br><span class="line">      <span class="keyword">get</span> () &#123;</span><br><span class="line">          <span class="comment">// return到你 写data.message的地方</span></span><br><span class="line">          <span class="keyword">return</span> temp;</span><br><span class="line">      &#125;,</span><br><span class="line">       <span class="comment">// data.message =  xxx 赋值的时候, 才会触发</span></span><br><span class="line">       <span class="keyword">set</span> (val) &#123;</span><br><span class="line">           <span class="comment">// 更新页面(所有跟message变量相关的界面)</span></span><br><span class="line">           <span class="built_in">document</span>.getElementById(<span class="string">"myP"</span>).innerHTML = val;</span><br><span class="line">           <span class="built_in">document</span>.getElementById(<span class="string">"myInput"</span>).value = val;</span><br><span class="line">           <span class="comment">// 更新message的值</span></span><br><span class="line">           temp = val;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h3 id="其他资料"><a href="#其他资料" class="headerlink" title="其他资料"></a>其他资料</h3><p>​    Vuejs官网: <a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初始Vue</title>
      <link href="/2019/11/15/%E5%88%9D%E5%A7%8BVue/"/>
      <url>/2019/11/15/%E5%88%9D%E5%A7%8BVue/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h4 id="阶段要学习的内容"><a href="#阶段要学习的内容" class="headerlink" title="阶段要学习的内容"></a>阶段要学习的内容</h4><ol><li>Vuejs 基础语法</li><li>Vue-router (前端路由组件)</li><li>Vuex (全局状态管理器)</li><li>axios (可用在前端/Node的请求模块)</li><li>Vue-cli2 (vue2.x) 脚手架模板</li><li>组件库的学习</li></ol><h4 id="简介-What"><a href="#简介-What" class="headerlink" title="简介(What)"></a>简介(What)</h4><p>​    它是一个渐进式的前端框架, 底层还是封装的原生JS </p><p>​    渐进式: 由底向上逐级开发组件, 增量开发, 构成我们的应用</p><p><img src="D:%5Czg%E6%96%87%E6%A1%A3%5C%E7%AC%AC%E5%9B%9B%E9%98%B6%E6%AE%B5_%E5%A4%87%E8%AF%BE_%E6%9D%8E%E4%B8%9C%E6%97%AD%5Cday03_vue01%5C%E7%A4%BA%E4%BE%8B%5C%E6%B8%90%E8%BF%9B%E5%BC%8F%E8%AE%B2%E8%A7%A3.png" alt="渐进式讲解"></p><h4 id="为什么学-Why"><a href="#为什么学-Why" class="headerlink" title="为什么学?(Why)"></a>为什么学?(Why)</h4><p>​    Vuejs的速度一目了然, 容错性很高. 成吨的提高你的开发效率, 极大减少了你操作DOM的动作, 只需要关系数据和视图即可</p><p>​    原生Javascript:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul id=<span class="string">"myUl"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">let</span> arr = [<span class="string">"春天"</span>, <span class="string">"夏天"</span>, <span class="string">"秋天"</span>, <span class="string">"冬天"</span>];</span><br><span class="line">        <span class="keyword">let</span> myUl = <span class="built_in">document</span>.getElementById(<span class="string">"myUl"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> theLi = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">            theLi.innerHTML = arr[i];</span><br><span class="line">            myUl.appendChild(theLi);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p>​    Vue实现同样效果:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;ul&gt;<span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in arr"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el: "#app",</span></span><br><span class="line"><span class="regexp">        data: &#123;arr: ["春天", "夏天", "秋天", "冬天"]&#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>​    原生js好比锯条, jq好比是带把手的锯条, vuejs电锯</p><h4 id="怎么学-How"><a href="#怎么学-How" class="headerlink" title="怎么学?(How)"></a>怎么学?(How)</h4><ol><li><p>要有html+css+javascript的基础</p><ol start="2"><li>以及Vuejs的基础语法 (不建议上来就用VueCli脚手架)</li><li>NodeJS+Webpack的基础</li><li>VueJS路由学习</li><li>VueCli脚手架的学习和使用 (熟悉VueCli里的各项配置)</li><li>Vuex+脚手架里使用路由+网络请求库+组件库的学习</li></ol></li></ol><h4 id="VueJS注意事项"><a href="#VueJS注意事项" class="headerlink" title="VueJS注意事项"></a>VueJS注意事项</h4><ol><li>不兼容IE8及以下IE浏览器</li><li>建议安装vue的devtool工具, 帮助你进行调试代码</li><li>必须是vuejs编写的代码, 才可以在控制台使用vue调试工具</li></ol><h4 id="安装devTool工具"><a href="#安装devTool工具" class="headerlink" title="安装devTool工具"></a>安装devTool工具</h4><ol><li>下载: 官网(<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a>) -&gt; 生态系统 -&gt; devTool工具</li><li>我们下载的是Google Chrome浏览器的插件 -&gt; 打开谷歌浏览器 -&gt; 更多工具 -&gt; 扩展程序</li><li>打开开发者模式, 把下载好的插件文件夹 -&gt; 拖拽扔进去即可完成安装</li><li>注意: 插件的文件夹不要删除/也不要随意挪动</li></ol><h3 id="使用VueJS"><a href="#使用VueJS" class="headerlink" title="使用VueJS"></a>使用VueJS</h3><ol><li><p>引入vuejs的js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/vue/2.6.6/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>声明根节点标签, 包裹着的都是Vuejs代码, 注意不能以html/body为根标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>实例化Vue对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">"#app"</span>, <span class="comment">// 告诉vue实例, 从id叫app的标签开始, 内部都是你vue的代码</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h4><p>​    它就是vuejs里最独特的使用方式, 可以在html中直接书写JS的变量/表达式</p><p>​    js表达式: 由变量/常量+运算符 组成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123;表达式&#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">"#app"</span>,</span><br><span class="line">data : &#123; <span class="comment">// data里都是声明的变量</span></span><br><span class="line">    message: <span class="string">"欢迎来到vuejs的世界"</span> <span class="comment">//无需var/let, 直接书写即可!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​    注意, 声明式渲染中, 可以写入表达式代码(包括判断/运算/条件运算符)等</p><p>​    例如:</p><pre><code>&lt;p&gt;{{ message }}&lt;/p&gt;&lt;p&gt;{{ 10 + 5 }}&lt;/p&gt;&lt;p&gt;{{ grade === 10 ? '等于' : '不等于' }}&lt;/p&gt;&lt;p&gt;{{ grade > 9 }}&lt;/p&gt;</code></pre><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><p>​    v- 开头的, 叫做 指令, 作用: 给标签扩展更多的功能, 因为你的属性被vue的指令修饰了, 说明现在你用的是vue的东西, 所以可以直接使用, 无需再加双大括号修饰</p><h5 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h5><p>​        给标签自带的属性, 设置一个变量的值, </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-bind:title=<span class="string">"pTitle"</span>&gt;我是个可怜, 无助, 能吃的p标签&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;img :src="imgSrc" alt="" /</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h5><p>​        给标签绑定事件, 注意后面的地方直接跟方法名, 如果没有参数, 则无需写小括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v-on:click=<span class="string">"btn"</span></span><br><span class="line">@click=<span class="string">"btn2"</span> <span class="comment">// 事件简化写法用@</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法要写在new Vue() 的methods:中</span></span><br></pre></td></tr></table></figure><h5 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h5><p>​        控制标签的出现和隐藏, 用于控制标签的 出现/隐藏 如果传true则当前标签+所有子标签都出现</p><p>​        如果传false, 则都不会出现, 但是如果有对应的v-else会显示v-else的标签</p><h5 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h5><p>​        v-else不能单独出现, 必须配合对应的v-if使用</p><h5 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h5><p>​        跟v-if的效果一样, 唯一的区别是:</p><p>​        v-if 传false 时, 不会在DOM上加载这个标签</p><p>​        v-show 传false 时, 会在DOM上加载这个标签(利用display:none;的方式隐藏</p><blockquote><p>所以用v-if和v-show取决于标签是否要频繁的切换, 如果需要则使用v-show, 效率高, 特别是包含子标签特别多的时候</p></blockquote><h5 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h5><p>​        用于根据数据, 循环生成标签, 在指令里用的是最多的</p><p>​        item: 临时变量, 每次循环, 获取的是数组里每一项的值</p><p>​        in关键字(必须)</p><p>​        arr 代表的vue里声明的变量(数组)</p><p>​        index: 临时变量, 代表下角标的使用</p><p>​        注意1: 每个循环的标签, 需要给一个独立(不重复的)key属性的值, 用来标识唯一性, 用于部分刷新和重载数据</p><p>​        注意2: v-for使用位置: 确定让哪个标签循环铺设, 就在哪个标签身上写v-for</p><p>​        注意3: v-for里的临时变量, 只能在当前标签/子标签内使用, 不能在兄弟标签上使用</p><h5 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h5><p>​        v-model主要应用于表单标签上, value属性的绑定, 实现页面标签的value值和Vuejs变量的双向绑定 (推荐使用v-model), 页面改变表单的值, 会同步给vuejs里的变量</p><blockquote><p>注意: 只有input和textarea以及select 等表单, 有v-model, 用v-model来给表单绑定值</p></blockquote><p>​        例如: 输入框/密码框/多选/下拉/单选/textarea</p><p>​        注意: 多选框的v-model必须是一个数组类型</p><blockquote><p> v-model, 实际上绑定的就是value属性</p></blockquote><h5 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h5><p>​        v-once修饰的标签, 只有在网页打开的第一次加载完, 以后就不会在受变量变化而影响</p><h4 id="事件详解"><a href="#事件详解" class="headerlink" title="事件详解"></a>事件详解</h4><p>​    在事件/属性后面.xxx 叫做修饰符, 修饰符一般都有额外的功能</p><ol><li><p>@click.stop 阻止事件冒泡</p><ol start="2"><li>@click.prevent 阻止默认事件</li><li>@click.self 只能由标签自身触发</li><li>@click.once 程序运行期间只能执行一次</li><li>@click=”btn6(myArg)” 事件传参, 如果是字符串, 请用单引号</li></ol></li></ol><blockquote><p>注意: 如果传参, 再使用(), 如果不传, 可以省略()不写, 如果传实践对象, 要使用$event</p></blockquote><h3 id="双向数据绑定原理"><a href="#双向数据绑定原理" class="headerlink" title="双向数据绑定原理"></a>双向数据绑定原理</h3><ol><li><p>页面-&gt;数据, 借助 oninput事件</p><ol start="2"><li>数据-&gt;页面, 借助Object.defineProperty() 监听一个对象的属性值的变化</li></ol></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> temp = <span class="string">""</span>; <span class="comment">// 临时存储值</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">       data.message = ev.target.value; <span class="comment">// 获取输入框里最新的值</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">let</span> data = &#123; <span class="comment">// 准备类似data里的数据</span></span><br><span class="line">       message: <span class="string">""</span></span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 参数1: 监听的对象, 参数2: 监听对象里的属性名, 参数3: 固定写法</span></span><br><span class="line">   <span class="built_in">Object</span>.defineProperty(data, <span class="string">"message"</span>, &#123;</span><br><span class="line">       <span class="comment">// 当你获取data对象里的message属性值的时候, 触发get方法</span></span><br><span class="line">       <span class="comment">// 不要在get方法里直接提取data.message的值, 会造成递归调用卡死.</span></span><br><span class="line">      <span class="keyword">get</span> () &#123;</span><br><span class="line">          <span class="comment">// return到你 写data.message的地方</span></span><br><span class="line">          <span class="keyword">return</span> temp;</span><br><span class="line">      &#125;,</span><br><span class="line">       <span class="comment">// data.message =  xxx 赋值的时候, 才会触发</span></span><br><span class="line">       <span class="keyword">set</span> (val) &#123;</span><br><span class="line">           <span class="comment">// 更新页面(所有跟message变量相关的界面)</span></span><br><span class="line">           <span class="built_in">document</span>.getElementById(<span class="string">"myP"</span>).innerHTML = val;</span><br><span class="line">           <span class="built_in">document</span>.getElementById(<span class="string">"myInput"</span>).value = val;</span><br><span class="line">           <span class="comment">// 更新message的值</span></span><br><span class="line">           temp = val;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h3 id="其他资料"><a href="#其他资料" class="headerlink" title="其他资料"></a>其他资料</h3><p>​    Vuejs官网: <a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
